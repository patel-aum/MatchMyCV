{"ast":null,"code":"const handleFileUpload = async e => {\n  e.preventDefault();\n  if (!file) return;\n  setLoading(true);\n  try {\n    const reader = new FileReader();\n    reader.onload = async event => {\n      const resumeText = event.target.result;\n      setProcessing(true);\n      try {\n        // Make direct call to OpenAI API using environment variable for the key\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` // Using environment variable\n          },\n          body: JSON.stringify({\n            model: 'gpt-4',\n            messages: [{\n              role: 'system',\n              content: 'You are a helpful assistant that analyzes resumes.'\n            }, {\n              role: 'user',\n              content: `Analyze this resume and provide job recommendations: ${resumeText}`\n            }],\n            max_tokens: 500,\n            temperature: 0.7\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`OpenAI API Error: ${response.status} ${response.statusText}`);\n        }\n        const data = await response.json();\n        setAnalysisResult(data.choices[0].message.content);\n        navigate('/results', {\n          state: data.choices[0].message.content\n        });\n      } catch (error) {\n        console.error(\"OpenAI API call failed:\", error);\n        alert(`OpenAI API call failed: ${error.message}`);\n      } finally {\n        setProcessing(false);\n      }\n    };\n    reader.readAsText(file);\n    alert(\"File read successfully!\");\n  } catch (error) {\n    console.error(\"File processing failed:\", error);\n    alert(`File processing failed: ${error.message}`);\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["handleFileUpload","e","preventDefault","file","setLoading","reader","FileReader","onload","event","resumeText","target","result","setProcessing","response","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","model","messages","role","content","max_tokens","temperature","ok","Error","status","statusText","data","json","setAnalysisResult","choices","message","navigate","state","error","console","alert","readAsText"],"sources":["/home/aum/Desktop/Projects/MatchMyCV/matchmycv/src/components/Dashboard.js"],"sourcesContent":["const handleFileUpload = async (e) => {\n  e.preventDefault();\n  if (!file) return;\n\n  setLoading(true);\n\n  try {\n    const reader = new FileReader();\n    reader.onload = async (event) => {\n      const resumeText = event.target.result;\n\n      setProcessing(true);\n\n      try {\n        // Make direct call to OpenAI API using environment variable for the key\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,  // Using environment variable\n          },\n          body: JSON.stringify({\n            model: 'gpt-4',\n            messages: [\n              { role: 'system', content: 'You are a helpful assistant that analyzes resumes.' },\n              { role: 'user', content: `Analyze this resume and provide job recommendations: ${resumeText}` },\n            ],\n            max_tokens: 500,\n            temperature: 0.7,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`OpenAI API Error: ${response.status} ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        setAnalysisResult(data.choices[0].message.content);\n        navigate('/results', { state: data.choices[0].message.content });\n      } catch (error) {\n        console.error(\"OpenAI API call failed:\", error);\n        alert(`OpenAI API call failed: ${error.message}`);\n      } finally {\n        setProcessing(false);\n      }\n    };\n\n    reader.readAsText(file);\n    alert(\"File read successfully!\");\n  } catch (error) {\n    console.error(\"File processing failed:\", error);\n    alert(`File processing failed: ${error.message}`);\n  } finally {\n    setLoading(false);\n  }\n};\n\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAOC,CAAC,IAAK;EACpCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,IAAI,CAACC,IAAI,EAAE;EAEXC,UAAU,CAAC,IAAI,CAAC;EAEhB,IAAI;IACF,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,KAAK,IAAK;MAC/B,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAEtCC,aAAa,CAAC,IAAI,CAAC;MAEnB,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;UACzEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE,CAAG;UACtE,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,KAAK,EAAE,OAAO;YACdC,QAAQ,EAAE,CACR;cAAEC,IAAI,EAAE,QAAQ;cAAEC,OAAO,EAAE;YAAqD,CAAC,EACjF;cAAED,IAAI,EAAE,MAAM;cAAEC,OAAO,EAAE,wDAAwDjB,UAAU;YAAG,CAAC,CAChG;YACDkB,UAAU,EAAE,GAAG;YACfC,WAAW,EAAE;UACf,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACf,QAAQ,CAACgB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqBjB,QAAQ,CAACkB,MAAM,IAAIlB,QAAQ,CAACmB,UAAU,EAAE,CAAC;QAChF;QAEA,MAAMC,IAAI,GAAG,MAAMpB,QAAQ,CAACqB,IAAI,CAAC,CAAC;QAClCC,iBAAiB,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,OAAO,CAAC;QAClDY,QAAQ,CAAC,UAAU,EAAE;UAAEC,KAAK,EAAEN,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX;QAAQ,CAAC,CAAC;MAClE,CAAC,CAAC,OAAOc,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CE,KAAK,CAAC,2BAA2BF,KAAK,CAACH,OAAO,EAAE,CAAC;MACnD,CAAC,SAAS;QACRzB,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAEDP,MAAM,CAACsC,UAAU,CAACxC,IAAI,CAAC;IACvBuC,KAAK,CAAC,yBAAyB,CAAC;EAClC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/CE,KAAK,CAAC,2BAA2BF,KAAK,CAACH,OAAO,EAAE,CAAC;EACnD,CAAC,SAAS;IACRjC,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}